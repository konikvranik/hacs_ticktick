# coding: utf-8

"""
    TickTick API

    [TickTick](https://ticktick.com/) TODO task manager.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from custom_components.ticktick_todo.pyticktick.openapi_client.models.column import Column
from custom_components.ticktick_todo.pyticktick.openapi_client.models.project_response import ProjectResponse

class ProjectDataResponse(BaseModel):
    """
    ProjectDataResponse
    """
    project: Optional[ProjectResponse] = None
    tasks: Optional[conlist(StrictStr)] = None
    columns: Optional[conlist(Column)] = None
    __properties = ["project", "tasks", "columns"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProjectDataResponse:
        """Create an instance of ProjectDataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in columns (list)
        _items = []
        if self.columns:
            for _item in self.columns:
                if _item:
                    _items.append(_item.to_dict())
            _dict['columns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProjectDataResponse:
        """Create an instance of ProjectDataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProjectDataResponse.parse_obj(obj)

        _obj = ProjectDataResponse.parse_obj({
            "project": ProjectResponse.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "tasks": obj.get("tasks"),
            "columns": [Column.from_dict(_item) for _item in obj.get("columns")] if obj.get("columns") is not None else None
        })
        return _obj


