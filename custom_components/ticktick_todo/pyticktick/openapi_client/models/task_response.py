# coding: utf-8

"""
    TickTick API

    [TickTick](https://ticktick.com/) TODO task manager.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing_extensions import Self

from custom_components.ticktick_todo.pyticktick.openapi_client.models.checklist_item import ChecklistItem
from custom_components.ticktick_todo.pyticktick.openapi_client.models.task_response_all_of_completed_time import \
    TaskResponseAllOfCompletedTime
from custom_components.ticktick_todo.pyticktick.openapi_client.models.task_response_all_of_status import \
    TaskResponseAllOfStatus


class TaskResponse(BaseModel):
    """
    TaskResponse
    """ # noqa: E501
    title: Optional[StrictStr] = Field(default=None, description="Task title")
    is_all_day: Optional[StrictBool] = Field(default=None, description="All day", alias="isAllDay")
    content: Optional[StrictStr] = Field(default=None, description="Task content")
    desc: Optional[StrictStr] = Field(default=None, description="Task description of checklist")
    due_date: Optional[Any] = Field(default=None, alias="dueDate")
    items: Optional[List[ChecklistItem]] = Field(default=None, description="Subtasks of Task")
    priority: Optional[StrictInt] = Field(default=None, description="Task priority")
    reminders: Optional[List[StrictStr]] = Field(default=None, description="List of reminder triggers")
    repeat_flag: Optional[StrictStr] = Field(default=None, description="Recurring rules of task", alias="repeatFlag")
    sort_order: Optional[StrictInt] = Field(default=None, description="Task sort order", alias="sortOrder")
    start_date: Optional[Any] = Field(default=None, alias="startDate")
    time_zone: Optional[Any] = Field(default=None, alias="timeZone")
    id: Optional[StrictStr] = Field(default=None, description="Task identifier")
    project_id: Optional[StrictStr] = Field(default=None, description="Task project id", alias="projectId")
    completed_time: Optional[TaskResponseAllOfCompletedTime] = Field(default=None, alias="completedTime")
    status: Optional[TaskResponseAllOfStatus] = None
    __properties: ClassVar[List[str]] = ["title", "isAllDay", "content", "desc", "dueDate", "items", "priority", "reminders", "repeatFlag", "sortOrder", "startDate", "timeZone", "id", "projectId", "completedTime", "status"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([null, null, null, null, null, null]):
            raise ValueError("must be one of enum values (null, null, null, null, null, null)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of completed_time
        if self.completed_time:
            _dict['completedTime'] = self.completed_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "isAllDay": obj.get("isAllDay"),
            "content": obj.get("content"),
            "desc": obj.get("desc"),
            "dueDate": obj.get("dueDate"),
            "items": [ChecklistItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "priority": obj.get("priority"),
            "reminders": obj.get("reminders"),
            "repeatFlag": obj.get("repeatFlag"),
            "sortOrder": obj.get("sortOrder"),
            "startDate": obj.get("startDate"),
            "timeZone": obj.get("timeZone"),
            "id": obj.get("id"),
            "projectId": obj.get("projectId"),
            "completedTime": TaskResponseAllOfCompletedTime.from_dict(obj["completedTime"]) if obj.get("completedTime") is not None else None,
            "status": TaskResponseAllOfStatus.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj


