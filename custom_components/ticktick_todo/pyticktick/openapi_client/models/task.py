# coding: utf-8

"""
    TickTick OpenAPI

    OpenAPI that allows the user to create and manage a TODO list using ChatGPT.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from custom_components.ticktick_todo.pyticktick.openapi_client.models.checklist_item import ChecklistItem

class Task(BaseModel):
    """
    Task
    """
    id: Optional[StrictStr] = Field(default=None, description="The ID of task")
    project_id: Optional[StrictStr] = Field(default=None, alias="projectId", description="The ID of project which task in")
    title: Optional[StrictStr] = Field(default=None, description="Title of task")
    is_all_day: Optional[StrictStr] = Field(default=None, alias="isAllDay", description="Is task all day, true or false")
    completed_time: Optional[StrictStr] = Field(default=None, alias="completedTime", description="Task completed time in \"yyyy-MM-dd'T'HH:mm:ssZ\", Example \"2019-11-13T03:00:00+0000")
    content: Optional[StrictStr] = Field(default=None, description="Content of task")
    desc: Optional[StrictStr] = Field(default=None, description="Description of checklist")
    due_date: Optional[StrictStr] = Field(default=None, alias="dueDate", description="Task due date time in \"yyyy-MM-dd'T'HH:mm:ssZ\", Example \"2019-11-13T03:00:00+0000\"")
    items: Optional[conlist(ChecklistItem)] = None
    priority: Optional[StrictInt] = Field(default=None, description="Task priority, None is 0, Low is 1, Medium is 3, High is 5")
    reminders: Optional[conlist(StrictStr)] = Field(default=None, description="List of reminder trigger, Example [\"TRIGGER:P0DT9H0M0S\",\"TRIGGER:PT0S\"]")
    repeat_flag: Optional[StrictStr] = Field(default=None, alias="repeatFlag", description="Recurring rules of task, Example \"RRULE:FREQ=DAILY;INTERVAL=1\"")
    sort_order: Optional[StrictInt] = Field(default=None, alias="sortOrder", description="Sort order value of task, Example 12345")
    start_date: Optional[StrictStr] = Field(default=None, alias="startDate", description="Start data time in \"yyyy-MM-dd'T'HH:mm:ssZ\", Example \"2023-04-23T12:00:00+0000\"")
    status: Optional[StrictInt] = Field(default=None, description="Task completion status, Normal is 0, Completed is 2")
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone", description="Task timezone, Example \"America/Los_Angeles\"")
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "projectId", "title", "isAllDay", "completedTime", "content", "desc", "dueDate", "items", "priority", "reminders", "repeatFlag", "sortOrder", "startDate", "status", "timeZone"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Task:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Task:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Task.parse_obj(obj)

        _obj = Task.parse_obj({
            "id": obj.get("id"),
            "project_id": obj.get("projectId"),
            "title": obj.get("title"),
            "is_all_day": obj.get("isAllDay"),
            "completed_time": obj.get("completedTime"),
            "content": obj.get("content"),
            "desc": obj.get("desc"),
            "due_date": obj.get("dueDate"),
            "items": [ChecklistItem.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "priority": obj.get("priority"),
            "reminders": obj.get("reminders"),
            "repeat_flag": obj.get("repeatFlag"),
            "sort_order": obj.get("sortOrder"),
            "start_date": obj.get("startDate"),
            "status": obj.get("status"),
            "time_zone": obj.get("timeZone")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


